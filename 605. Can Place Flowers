'''
Intuition

Adjacent Constraint: Since no two flowers can be adjacent, we need to check that each potential spot (i.e., flowerbed[i] == 0) also has adjacent spots (flowerbed[i - 1] and flowerbed[i + 1]) that are empty or don't exist (at the boundary of the array).

Greedy Approach: The goal is to plant flowers in any valid spots while moving through the array. The greedy strategy is to plant a flower as soon as a valid position is found and move to the next possible position. This ensures we plant as many flowers as possible without violating the rule.

Approach

Iterate through the Flowerbed: Use a while loop to traverse the flowerbed and check each potential planting spot.

Skip If Occupied: If a spot already has a flower (flowerbed[i] == 1), skip the next one because we can't plant adjacent to it. This is achieved by incrementing i by 2.

Check for Valid Empty Spot: If flowerbed[i] == 0, we check whether the next spot (flowerbed[i + 1]) is also empty or doesn't exist (i.e., it's the last spot in the array). If so, plant a flower, decrement n, and skip the next spot by incrementing i by 2 (since we can't plant adjacent).

Handle Non-Valid Empty Spot: If we can't plant in the current empty spot due to the next spot being occupied, we increment i by 3 to ensure we skip over the invalid position.

End Condition: If we manage to plant n flowers, return true. If we reach the end of the flowerbed and still need to plant more flowers (n > 0), return false.

Complexity

Time complexity: O(m), where m is the length of the flowerbed. We scan the flowerbed linearly, skipping over spots depending on the conditions.
Space complexity: O(1), since we only use a constant amount of extra space regardless of the size of the input.

'''
def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:
        length = len(flowerbed)
        i = 0
        while i < length and n > 0:
            if flowerbed[i] == 1:
                i += 2  # Skip next spot since a flower is planted at i
            elif i == length - 1 or flowerbed[i + 1] == 0:
                # Plant a flower if it's the last spot or the next spot is empty
                n -= 1
                i += 2  # Move two steps forward since we just planted
            else:
                i += 3  # Skip to the next possible empty spot
        return n <= 0  # If all flowers are planted, return True
