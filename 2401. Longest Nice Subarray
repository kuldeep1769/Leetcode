ef longestNiceSubarray(self, nums: List[int]) -> int:
        '''
        -------Sliding Window Technique------

        Use two pointers (l and r) to define a valid subarray.
        Maintain a bitmask (usedBits) to track the OR result of numbers in the current window.
        If adding nums[r] causes a conflict (usedBits & nums[r] ≠ 0), shrink the window from the left (l).
        Otherwise, expand the window and update maxLength.

        -------Bitwise Operations--------
        
        usedBits |= nums[r] → Adds the new number’s bits to the mask.
        usedBits ^= nums[l] → Removes nums[l] when shrinking the window.
        '''
        l = 0
        usedBits = 0
        maxLength = 0

        for r in range(len(nums)):
            while (usedBits & nums[r]) != 0:
                usedBits ^= nums[l]
                l += 1

            usedBits |= nums[r]
            maxLength = max(maxLength, r - l + 1)

        return maxLength
