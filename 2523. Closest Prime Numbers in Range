
################### Approach to solve using Sieve of Eratoshthenes ####################
'''
This solution uses the Sieve of Eratosthenes, which is much more efficient for finding prime numbers in a range:

Sieve of Eratosthenes Implementation:

Create a boolean array sieve of size right+1, initially all set to True
For each number i starting from 2 up to sqrt(right): If i is prime (sieve[i] is True), mark all its multiples as non-prime
After the sieve operation, sieve[i] is True if and only if i is prime
Collecting Primes:

We collect all numbers in the range [left, right] that are marked as prime in our sieve
Finding the Closest Pair:

Iterate through consecutive pairs of primes to find the minimum gap
If we find a pair with a smaller gap, update our result
Complexity

Time complexity: O(right * log(log(right)))

Space complexity: O(right)

'''

def closestPrimes(self, left: int, right: int) -> list[int]:
        sieve = [True] * (right + 1)
        sieve[0] = sieve[1] = False
        
        for i in range(2, int(right**0.5) + 1):
            if sieve[i]:
                for j in range(i*i, right + 1, i):
                    sieve[j] = False
        
        primes = [i for i in range(left, right + 1) if sieve[i]]
        
        if len(primes) < 2:
            return [-1, -1]
        
        min_gap = float('inf')
        result = [-1, -1]
        
        for i in range(1, len(primes)):
            gap = primes[i] - primes[i-1]
            if gap < min_gap:
                min_gap = gap
                result = [primes[i-1], primes[i]]
        
        return result
