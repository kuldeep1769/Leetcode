from collections import deque
class Solution(object):
    def highestPeak(self, isWater):
        """
        :type isWater: List[List[int]]
        :rtype: List[List[int]]
        """
        # Approach - Using Multi-Source BFS
        # T.C : O(m * n), where we will visit all cells once
        # S.C : O(m * n), in worst case queue will contain all the cells

        m = len(isWater)
        n = len(isWater[0])
        height = [[-1] * n for _ in range(m)]
        que = deque()
        
        # Initialize the queue with all water cells and set their height to 0
        for i in range(m):
            for j in range(n):
                if isWater[i][j] == 1:
                    que.append((i, j))
                    height[i][j] = 0
        
        # Directions for moving up, down, left, right respectively 
        directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
        
        # Perform Multi-Source BFS
        while que:
            i, j = que.popleft()
            
            for di, dj in directions:
                i_ =  i + di
                j_ =  j + dj

                #height[i_][j_] == -1: This is to check if the cell is unassigned.

                if 0 <= i_ < m and 0 <= j_ < n and height[i_][j_] == -1:
                    height[i_][j_] = height[i][j] + 1
                    que.append((i_, j_))
        
        return height
        
